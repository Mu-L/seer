name: windows-latest Developement Build

on:
  workflow_dispatch:

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: windows-latest

    steps:
      - uses: actions/checkout@v4

      - name: Install WSL2 and Ubuntu
        uses: Vampire/setup-wsl@v1 # Or a similar action to install WSL2 and a distro
        with:
          distro: Ubuntu
          version: 2

      - name: Update Ubuntu
        shell: wsl-bash {0}
        run: |
          sudo apt-get update

      - name: Install Qt
        uses: jurplel/install-qt-action@v3
        with:
          version: 6.6
          install-deps: 'true'
          modules: 'qtcharts'

      - name: Where am I
        shell: wsl-bash {0}
        run: |
          pwd
          ls -l

      - name: Tool versions
        shell: wsl-bash {0}
        run: |
            g++ --version
            cmake --version

      - name: Configure CMake
        # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
        # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
        shell: wsl-bash {0}
        run: |
          cd src
          cmake -B ${{github.workspace}}/src/build -DQTVERSION=QT6 -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}

      - name: Build
        # Build your program with the given configuration
        shell: wsl-bash {0}
        run: |
          cd src
          cmake --build ${{github.workspace}}/src/build --config ${{env.BUILD_TYPE}} --target seergdb --parallel 4

      - name: Tar
        shell: wsl-bash {0}
        run: |
          cd src/build
          cp ../../LICENSE .
          cp ../../CHANGELOG.md .
          tar zcvf seergdb.tar.gz LICENSE CHANGELOG.md seergdb

      - name: List Results
        shell: wsl-bash {0}
        run: |
          cd src
          ls -l build/

